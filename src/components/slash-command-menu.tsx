/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/4bz0pXv9NZb
 */
import {
  CommandInput,
  CommandItem,
  CommandGroup,
  CommandSeparator,
  CommandList,
  Command,
} from '@/components/ui/command'
import { CodeIcon, HeadingIcon, TableIcon } from 'lucide-react'
import { SVGProps, useEffect, useRef } from 'react'

type Props = {
  onHideMenu: () => void
}

export function SlashCommandMenu({ onHideMenu }: Props) {
  const commandRef = useRef<HTMLDivElement>(null)
  const commandInputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    const commandEl = commandRef.current
    if (!commandEl) return
    setTimeout(() => {
      if (commandInputRef.current) {
        commandInputRef.current.focus()
      }
    }, 10)

    const keyDownHandler = (event: KeyboardEvent): void => {
      if (event.key === 'Escape') {
        onHideMenu()
        return
      }

      if (event.key === 'ArrowDown') {
        event.preventDefault()
        const commandItems = Array.from(
          commandEl.querySelectorAll('[data-command-menu-item]'),
        )

        const activeItem =
          commandItems.find((item) =>
            item.classList.contains('command-menu-item-active'),
          ) ?? commandItems[0]

        const nextItem =
          commandItems[
            (commandItems.indexOf(activeItem) + 1) % commandItems.length
          ] ?? commandItems[0]
        if (!nextItem || !activeItem) return

        activeItem.classList.remove('command-menu-item-active')
        nextItem.classList.add('command-menu-item-active')

        // scroll into view
        nextItem.scrollIntoView({
          block: 'nearest',
        })
      }

      if (event.key === 'ArrowUp') {
        event.preventDefault()
        const commandItems = Array.from(
          commandEl.querySelectorAll('[data-command-menu-item]'),
        )

        const activeItem =
          commandItems.find((item) =>
            item.classList.contains('command-menu-item-active'),
          ) ?? commandItems[0]

        const nextItem =
          commandItems[
            (commandItems.indexOf(activeItem) - 1) % commandItems.length
          ] ?? commandItems[commandItems.length - 1]

        if (!nextItem || !activeItem) return

        activeItem.classList.remove('command-menu-item-active')
        nextItem.classList.add('command-menu-item-active')

        // scroll into view
        nextItem.scrollIntoView({
          block: 'nearest',
        })
      }
    }

    commandEl.addEventListener('keydown', keyDownHandler)

    return () => {
      commandEl?.removeEventListener('keydown', keyDownHandler)
    }
  }, [])

  return (
    <Command
      ref={commandRef}
      className="rounded-lg border border-gray-200 shadow-md dark:border-gray-800"
    >
      <CommandInput
        ref={commandInputRef}
        placeholder="Type a command or search..."
      />
      <CommandList>
        <CommandGroup heading="Text Formatting">
          <CommandItem>
            <BoldIcon className="mr-2 h-4 w-4" />
            <div>Make your text bold</div>
          </CommandItem>
          <CommandItem>
            <ItalicIcon className="mr-2 h-4 w-4" />
            <div>Italicize your text</div>
          </CommandItem>
          <CommandItem>
            <UnderlineIcon className="mr-2 h-4 w-4" />
            <div>Underline your text</div>
          </CommandItem>
        </CommandGroup>
        <CommandSeparator />
        <CommandGroup heading="Block Types">
          <CommandItem>
            <ListIcon className="mr-2 h-4 w-4" />
            <div>Create a bulleted list</div>
          </CommandItem>
          <CommandItem>
            <ListIcon className="mr-2 h-4 w-4" />
            <div>Create a numbered list</div>
          </CommandItem>
          <CommandItem>
            <QuoteIcon className="mr-2 h-4 w-4" />
            <div>Insert a blockquote</div>
          </CommandItem>
          <CommandItem>
            <CodeIcon className="mr-2 h-4 w-4" />
            <div>Insert code</div>
          </CommandItem>
          <CommandItem>
            <TableIcon className="mr-2 h-4 w-4" />
            <div>Insert a table</div>
          </CommandItem>
          <CommandItem>
            <HeadingIcon className="mr-2 h-4 w-4" />
            <div>Insert a heading</div>
          </CommandItem>
        </CommandGroup>
        <CommandSeparator />
        <CommandGroup heading="Embeds">
          <CommandItem>
            <ImageIcon className="mr-2 h-4 w-4" />
            <div>Embed an image from a URL</div>
          </CommandItem>
          <CommandItem>
            <VideoIcon className="mr-2 h-4 w-4" />
            <div>Embed a video from a URL</div>
          </CommandItem>
          <CommandItem>
            <LinkIcon className="mr-2 h-4 w-4" />
            <div>Embed a link from a URL</div>
          </CommandItem>
        </CommandGroup>
      </CommandList>
    </Command>
  )
}

function BoldIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M14 12a4 4 0 0 0 0-8H6v8" />
      <path d="M15 20a4 4 0 0 0 0-8H6v8Z" />
    </svg>
  )
}

function ItalicIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="19" x2="10" y1="4" y2="4" />
      <line x1="14" x2="5" y1="20" y2="20" />
      <line x1="15" x2="9" y1="4" y2="20" />
    </svg>
  )
}

function UnderlineIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 4v6a6 6 0 0 0 12 0V4" />
      <line x1="4" x2="20" y1="20" y2="20" />
    </svg>
  )
}

function ListIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="8" x2="21" y1="6" y2="6" />
      <line x1="8" x2="21" y1="12" y2="12" />
      <line x1="8" x2="21" y1="18" y2="18" />
      <line x1="3" x2="3.01" y1="6" y2="6" />
      <line x1="3" x2="3.01" y1="12" y2="12" />
      <line x1="3" x2="3.01" y1="18" y2="18" />
    </svg>
  )
}

function QuoteIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z" />
      <path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z" />
    </svg>
  )
}

function ImageIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
      <circle cx="9" cy="9" r="2" />
      <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
    </svg>
  )
}

function VideoIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 8-6 4 6 4V8Z" />
      <rect width="14" height="12" x="2" y="6" rx="2" ry="2" />
    </svg>
  )
}

function LinkIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" />
      <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" />
    </svg>
  )
}
